#include <iostream>
#include <vector>
#include <map>
#include <cstdlib>
#include <ctime>
#include <thread>
#include <chrono>

/// -------- Forward Declarations ------------
class Game;
class GameState;

/// -------- Dice & DiceFactory --------------
class Dice {
    int sides;
public:
    Dice(int sides = 6) : sides(sides) {}
    int roll() const {
        return (std::rand() % sides) + 1;
    }
};

class DiceFactory {
public:
    static Dice createStandardDice() {
        return Dice(6);
    }
};

/// -------- Player & PlayerFactory ----------
class Player {
    std::string name;
    int position = 0;
public:
    Player(const std::string& name) : name(name) {}
    const std::string& getName() const { return name; }
    int getPosition() const { return position; }
    void setPosition(int pos) { position = pos; }
};

class PlayerFactory {
public:
    static Player* createPlayer(const std::string& name) {
        return new Player(name);
    }
};

/// -------- Board ---------------------------
class Board {
    int size;
    std::map<int, int> snakes;
    std::map<int, int> ladders;
public:
    Board(int size = 100) : size(size) {}

    void addSnake(int start, int end) {
        if (start > end && start <= size) snakes[start] = end;
    }

    void addLadder(int start, int end) {
        if (end > start && end <= size) ladders[start] = end;
    }

    int getNextPosition(int pos) const {
        if (snakes.count(pos)) {
            std::cout << "Oops! Snake at " << pos << " â†’ " << snakes.at(pos) << "\n";
            return snakes.at(pos);
        }
        if (ladders.count(pos)) {
            std::cout << "Yay! Ladder at " << pos << " â†’ " << ladders.at(pos) << "\n";
            return ladders.at(pos);
        }
        return pos;
    }

    int getSize() const { return size; }

    void displayInfo() const {
        std::cout << "\nBoard Size: " << size << "\nSnakes:\n";
        for (auto& s : snakes) std::cout << "  " << s.first << " â†’ " << s.second << "\n";
        std::cout << "Ladders:\n";
        for (auto& l : ladders) std::cout << "  " << l.first << " â†’ " << l.second << "\n";
    }
};

/// -------- State Interface -----------------
class GameState {
public:
    virtual ~GameState() = default;
    virtual void handle(Game& game) = 0;
};

/// -------- Game Class ----------------------
class Game {
    Board board;
    Dice dice;
    std::vector<Player*> players;
    GameState* state = nullptr;
    int currentPlayerIndex = 0;
    bool gameOver = false;

public:
    Game(int boardSize, Dice dice) : board(boardSize), dice(dice) {
        std::srand(static_cast<unsigned int>(std::time(nullptr)));
    }

    ~Game() {
        delete state;
        for (auto p : players) delete p;
    }

    void setState(GameState* newState) {
        if (state) delete state;
        state = newState;
    }

    void handleState() {
        if (state) state->handle(*this);
    }

    void addPlayer(Player* player) {
        players.push_back(player);
    }

    int getPlayerCount() const {
        return players.size();
    }

    void setupBoard() {
        board.addSnake(99, 10);
        board.addSnake(74, 53);
        board.addLadder(2, 38);
        board.addLadder(7, 14);
        board.addLadder(15, 26);
        board.addLadder(28, 84);
        board.displayInfo();
    }

    void playGameLoop() {
        std::cout << "\nGame Starting...\n";

        while (!gameOver) {
            Player* player = players[currentPlayerIndex];
            std::cout << "\n" << player->getName() << "'s turn.\n";
            int roll = dice.roll();
            std::cout << "Rolled: " << roll << "\n";

            int nextPos = player->getPosition() + roll;
            if (nextPos > board.getSize()) {
                std::cout << "Cannot move. Need exact number to finish.\n";
            } else {
                nextPos = board.getNextPosition(nextPos);
                player->setPosition(nextPos);
                std::cout << player->getName() << " is now at " << nextPos << "\n";

                if (nextPos == board.getSize()) {
                    std::cout << "\nðŸŽ‰ " << player->getName() << " WINS! ðŸŽ‰\n";
                    gameOver = true;
                    setState(new class GameOverState());
                    return; // exit loop and call GameOver
                }
            }

            currentPlayerIndex = (currentPlayerIndex + 1) % players.size();
            std::this_thread::sleep_for(std::chrono::milliseconds(500));
        }
    }
};

/// -------- States Implementations ----------

class PlayingState : public GameState {
public:
    void handle(Game& game) override {
        game.playGameLoop();               // run the game
        game.handleState();                // after game over, transition handled
    }
};

class GameOverState : public GameState {
public:
    void handle(Game& game) override {
        std::cout << "\nGame Over. Thanks for playing!\n";
    }
};

class WaitingState : public GameState {
public:
    void handle(Game& game) override {
        std::cout << "\nWaiting for players...\n";
        if (game.getPlayerCount() >= 2) {
            std::cout << "Enough players. Starting game...\n";
            game.setState(new PlayingState());
            game.handleState();
        } else {
            std::cout << "Not enough players to start. Add more.\n";
        }
    }
};

/// -------- Main Function -------------------
int main() {
    Dice dice = DiceFactory::createStandardDice();
    Game game(100, dice);

    game.addPlayer(PlayerFactory::createPlayer("Alice"));
    game.addPlayer(PlayerFactory::createPlayer("Bob"));
    game.addPlayer(PlayerFactory::createPlayer("Charlie"));

    game.setupBoard();

    game.setState(new WaitingState());
    game.handleState();

    return 0;
}
